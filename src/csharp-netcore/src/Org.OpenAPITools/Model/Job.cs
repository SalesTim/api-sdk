/* 
 * SalesTim API
 *
 * The Microsoft Teams Governance API 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@salestim.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A job that performs some tasks asynchronously
    /// </summary>
    [DataContract]
    public partial class Job :  IEquatable<Job>, IValidatableObject
    {
        /// <summary>
        /// The job current status
        /// </summary>
        /// <value>The job current status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            [EnumMember(Value = "active")]
            Active = 1,

            /// <summary>
            /// Enum Waiting for value: waiting
            /// </summary>
            [EnumMember(Value = "waiting")]
            Waiting = 2,

            /// <summary>
            /// Enum Completed for value: completed
            /// </summary>
            [EnumMember(Value = "completed")]
            Completed = 3,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 4,

            /// <summary>
            /// Enum Deleyed for value: deleyed
            /// </summary>
            [EnumMember(Value = "deleyed")]
            Deleyed = 5,

            /// <summary>
            /// Enum Paused for value: paused
            /// </summary>
            [EnumMember(Value = "paused")]
            Paused = 6,

            /// <summary>
            /// Enum UnknownFutureValue for value: unknownFutureValue
            /// </summary>
            [EnumMember(Value = "unknownFutureValue")]
            UnknownFutureValue = 7

        }

        /// <summary>
        /// The job current status
        /// </summary>
        /// <value>The job current status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Job" /> class.
        /// </summary>
        /// <param name="id">The job ID, auto-generated at creation.</param>
        /// <param name="log">The job audit log.</param>
        /// <param name="type">The job type (for instance &#x60;ProvisioningRequest&#x60;).</param>
        /// <param name="status">The job current status.</param>
        /// <param name="progress">The job current progress.</param>
        /// <param name="data">The job data (for instance a &#x60;ProvisioningRequest&#x60; object).</param>
        public Job(Guid id = default(Guid), List<string> log = default(List<string>), string type = default(string), StatusEnum? status = default(StatusEnum?), int progress = default(int), Object data = default(Object))
        {
            this.Id = id;
            this.Log = log;
            this.Type = type;
            this.Status = status;
            this.Progress = progress;
            this.Data = data;
        }
        
        /// <summary>
        /// The job ID, auto-generated at creation
        /// </summary>
        /// <value>The job ID, auto-generated at creation</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// The job audit log
        /// </summary>
        /// <value>The job audit log</value>
        [DataMember(Name="log", EmitDefaultValue=false)]
        public List<string> Log { get; set; }

        /// <summary>
        /// The job type (for instance &#x60;ProvisioningRequest&#x60;)
        /// </summary>
        /// <value>The job type (for instance &#x60;ProvisioningRequest&#x60;)</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// The job current progress
        /// </summary>
        /// <value>The job current progress</value>
        [DataMember(Name="progress", EmitDefaultValue=false)]
        public int Progress { get; set; }

        /// <summary>
        /// The job data (for instance a &#x60;ProvisioningRequest&#x60; object)
        /// </summary>
        /// <value>The job data (for instance a &#x60;ProvisioningRequest&#x60; object)</value>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public Object Data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Job {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Log: ").Append(Log).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Job);
        }

        /// <summary>
        /// Returns true if Job instances are equal
        /// </summary>
        /// <param name="input">Instance of Job to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Job input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Log == input.Log ||
                    this.Log != null &&
                    input.Log != null &&
                    this.Log.SequenceEqual(input.Log)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Progress == input.Progress ||
                    this.Progress.Equals(input.Progress)
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Log != null)
                    hashCode = hashCode * 59 + this.Log.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                hashCode = hashCode * 59 + this.Progress.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Progress (int) maximum
            if(this.Progress > (int)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Progress, must be a value less than or equal to 100.", new [] { "Progress" });
            }

            // Progress (int) minimum
            if(this.Progress < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Progress, must be a value greater than or equal to 0.", new [] { "Progress" });
            }

            yield break;
        }
    }

}
