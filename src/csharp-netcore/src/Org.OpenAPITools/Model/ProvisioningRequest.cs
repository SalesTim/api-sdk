/* 
 * SalesTim API
 *
 * The Microsoft Teams Governance API 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@salestim.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A request to provision a team based on a template from your corporate catalog
    /// </summary>
    [DataContract]
    public partial class ProvisioningRequest :  IEquatable<ProvisioningRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProvisioningRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProvisioningRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProvisioningRequest" /> class.
        /// </summary>
        /// <param name="templateId">The template ID (required).</param>
        /// <param name="requestedTeamName">Requested team name (required).</param>
        /// <param name="requestedTeamDescription">Requested team description.</param>
        /// <param name="requestedTeamWelcomeMessage">Requested team welcome message.</param>
        /// <param name="requestedMembers">Requested members as an array of objects.</param>
        /// <param name="requestedOwners">Requested owners as an array of users. User identifier could be its ID, UPN or email..</param>
        /// <param name="onBehalfOfRequester">onBehalfOfRequester.</param>
        public ProvisioningRequest(string templateId = default(string), string requestedTeamName = default(string), string requestedTeamDescription = default(string), string requestedTeamWelcomeMessage = default(string), List<ProvisioningRequestRequestedMembers> requestedMembers = default(List<ProvisioningRequestRequestedMembers>), List<ProvisioningRequestRequestedMembers> requestedOwners = default(List<ProvisioningRequestRequestedMembers>), ProvisioningRequestOnBehalfOfRequester onBehalfOfRequester = default(ProvisioningRequestOnBehalfOfRequester))
        {
            // to ensure "templateId" is required (not null)
            this.TemplateId = templateId ?? throw new ArgumentNullException("templateId is a required property for ProvisioningRequest and cannot be null");
            // to ensure "requestedTeamName" is required (not null)
            this.RequestedTeamName = requestedTeamName ?? throw new ArgumentNullException("requestedTeamName is a required property for ProvisioningRequest and cannot be null");
            this.RequestedTeamDescription = requestedTeamDescription;
            this.RequestedTeamWelcomeMessage = requestedTeamWelcomeMessage;
            this.RequestedMembers = requestedMembers;
            this.RequestedOwners = requestedOwners;
            this.OnBehalfOfRequester = onBehalfOfRequester;
        }
        
        /// <summary>
        /// The template ID
        /// </summary>
        /// <value>The template ID</value>
        [DataMember(Name="templateId", EmitDefaultValue=false)]
        public string TemplateId { get; set; }

        /// <summary>
        /// Requested team name
        /// </summary>
        /// <value>Requested team name</value>
        [DataMember(Name="requestedTeamName", EmitDefaultValue=false)]
        public string RequestedTeamName { get; set; }

        /// <summary>
        /// Requested team description
        /// </summary>
        /// <value>Requested team description</value>
        [DataMember(Name="requestedTeamDescription", EmitDefaultValue=false)]
        public string RequestedTeamDescription { get; set; }

        /// <summary>
        /// Requested team welcome message
        /// </summary>
        /// <value>Requested team welcome message</value>
        [DataMember(Name="requestedTeamWelcomeMessage", EmitDefaultValue=false)]
        public string RequestedTeamWelcomeMessage { get; set; }

        /// <summary>
        /// Requested members as an array of objects
        /// </summary>
        /// <value>Requested members as an array of objects</value>
        [DataMember(Name="requestedMembers", EmitDefaultValue=false)]
        public List<ProvisioningRequestRequestedMembers> RequestedMembers { get; set; }

        /// <summary>
        /// Requested owners as an array of users. User identifier could be its ID, UPN or email.
        /// </summary>
        /// <value>Requested owners as an array of users. User identifier could be its ID, UPN or email.</value>
        [DataMember(Name="requestedOwners", EmitDefaultValue=false)]
        public List<ProvisioningRequestRequestedMembers> RequestedOwners { get; set; }

        /// <summary>
        /// Gets or Sets OnBehalfOfRequester
        /// </summary>
        [DataMember(Name="onBehalfOfRequester", EmitDefaultValue=false)]
        public ProvisioningRequestOnBehalfOfRequester OnBehalfOfRequester { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProvisioningRequest {\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  RequestedTeamName: ").Append(RequestedTeamName).Append("\n");
            sb.Append("  RequestedTeamDescription: ").Append(RequestedTeamDescription).Append("\n");
            sb.Append("  RequestedTeamWelcomeMessage: ").Append(RequestedTeamWelcomeMessage).Append("\n");
            sb.Append("  RequestedMembers: ").Append(RequestedMembers).Append("\n");
            sb.Append("  RequestedOwners: ").Append(RequestedOwners).Append("\n");
            sb.Append("  OnBehalfOfRequester: ").Append(OnBehalfOfRequester).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProvisioningRequest);
        }

        /// <summary>
        /// Returns true if ProvisioningRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ProvisioningRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProvisioningRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                ) && 
                (
                    this.RequestedTeamName == input.RequestedTeamName ||
                    (this.RequestedTeamName != null &&
                    this.RequestedTeamName.Equals(input.RequestedTeamName))
                ) && 
                (
                    this.RequestedTeamDescription == input.RequestedTeamDescription ||
                    (this.RequestedTeamDescription != null &&
                    this.RequestedTeamDescription.Equals(input.RequestedTeamDescription))
                ) && 
                (
                    this.RequestedTeamWelcomeMessage == input.RequestedTeamWelcomeMessage ||
                    (this.RequestedTeamWelcomeMessage != null &&
                    this.RequestedTeamWelcomeMessage.Equals(input.RequestedTeamWelcomeMessage))
                ) && 
                (
                    this.RequestedMembers == input.RequestedMembers ||
                    this.RequestedMembers != null &&
                    input.RequestedMembers != null &&
                    this.RequestedMembers.SequenceEqual(input.RequestedMembers)
                ) && 
                (
                    this.RequestedOwners == input.RequestedOwners ||
                    this.RequestedOwners != null &&
                    input.RequestedOwners != null &&
                    this.RequestedOwners.SequenceEqual(input.RequestedOwners)
                ) && 
                (
                    this.OnBehalfOfRequester == input.OnBehalfOfRequester ||
                    (this.OnBehalfOfRequester != null &&
                    this.OnBehalfOfRequester.Equals(input.OnBehalfOfRequester))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TemplateId != null)
                    hashCode = hashCode * 59 + this.TemplateId.GetHashCode();
                if (this.RequestedTeamName != null)
                    hashCode = hashCode * 59 + this.RequestedTeamName.GetHashCode();
                if (this.RequestedTeamDescription != null)
                    hashCode = hashCode * 59 + this.RequestedTeamDescription.GetHashCode();
                if (this.RequestedTeamWelcomeMessage != null)
                    hashCode = hashCode * 59 + this.RequestedTeamWelcomeMessage.GetHashCode();
                if (this.RequestedMembers != null)
                    hashCode = hashCode * 59 + this.RequestedMembers.GetHashCode();
                if (this.RequestedOwners != null)
                    hashCode = hashCode * 59 + this.RequestedOwners.GetHashCode();
                if (this.OnBehalfOfRequester != null)
                    hashCode = hashCode * 59 + this.OnBehalfOfRequester.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
