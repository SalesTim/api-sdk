/* 
 * SalesTim API
 *
 * The Microsoft Teams Governance API 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@salestim.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new provisioning job by sending a ProvisioningRequest
        /// </summary>
        /// <remarks>
        /// Create a new provisioning job by sending a ProvisioningRequest
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provisioningRequest">A ProvisioningRequest object describing the job to execute</param>
        /// <returns>Job</returns>
        Job CreateProvisioningJob (ProvisioningRequest provisioningRequest);

        /// <summary>
        /// Create a new provisioning job by sending a ProvisioningRequest
        /// </summary>
        /// <remarks>
        /// Create a new provisioning job by sending a ProvisioningRequest
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provisioningRequest">A ProvisioningRequest object describing the job to execute</param>
        /// <returns>ApiResponse of Job</returns>
        ApiResponse<Job> CreateProvisioningJobWithHttpInfo (ProvisioningRequest provisioningRequest);
        /// <summary>
        /// Get detailed information about a job (Status, logs...)
        /// </summary>
        /// <remarks>
        /// Get detailed information about a job (Status, logs...)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The job ID</param>
        /// <returns>Job</returns>
        Job GetJob (string id);

        /// <summary>
        /// Get detailed information about a job (Status, logs...)
        /// </summary>
        /// <remarks>
        /// Get detailed information about a job (Status, logs...)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The job ID</param>
        /// <returns>ApiResponse of Job</returns>
        ApiResponse<Job> GetJobWithHttpInfo (string id);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new provisioning job by sending a ProvisioningRequest
        /// </summary>
        /// <remarks>
        /// Create a new provisioning job by sending a ProvisioningRequest
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provisioningRequest">A ProvisioningRequest object describing the job to execute</param>
        /// <returns>Task of Job</returns>
        System.Threading.Tasks.Task<Job> CreateProvisioningJobAsync (ProvisioningRequest provisioningRequest);

        /// <summary>
        /// Create a new provisioning job by sending a ProvisioningRequest
        /// </summary>
        /// <remarks>
        /// Create a new provisioning job by sending a ProvisioningRequest
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provisioningRequest">A ProvisioningRequest object describing the job to execute</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<Job>> CreateProvisioningJobAsyncWithHttpInfo (ProvisioningRequest provisioningRequest);
        /// <summary>
        /// Get detailed information about a job (Status, logs...)
        /// </summary>
        /// <remarks>
        /// Get detailed information about a job (Status, logs...)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The job ID</param>
        /// <returns>Task of Job</returns>
        System.Threading.Tasks.Task<Job> GetJobAsync (string id);

        /// <summary>
        /// Get detailed information about a job (Status, logs...)
        /// </summary>
        /// <remarks>
        /// Get detailed information about a job (Status, logs...)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The job ID</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<Job>> GetJobAsyncWithHttpInfo (string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobsApi : IJobsApiSync, IJobsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JobsApi : IJobsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobsApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JobsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public JobsApi(Org.OpenAPITools.Client.ISynchronousClient client,Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new provisioning job by sending a ProvisioningRequest Create a new provisioning job by sending a ProvisioningRequest
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provisioningRequest">A ProvisioningRequest object describing the job to execute</param>
        /// <returns>Job</returns>
        public Job CreateProvisioningJob (ProvisioningRequest provisioningRequest)
        {
             Org.OpenAPITools.Client.ApiResponse<Job> localVarResponse = CreateProvisioningJobWithHttpInfo(provisioningRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new provisioning job by sending a ProvisioningRequest Create a new provisioning job by sending a ProvisioningRequest
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provisioningRequest">A ProvisioningRequest object describing the job to execute</param>
        /// <returns>ApiResponse of Job</returns>
        public Org.OpenAPITools.Client.ApiResponse< Job > CreateProvisioningJobWithHttpInfo (ProvisioningRequest provisioningRequest)
        {
            // verify the required parameter 'provisioningRequest' is set
            if (provisioningRequest == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'provisioningRequest' when calling JobsApi->CreateProvisioningJob");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = provisioningRequest;

            // authentication (appId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-APP-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-APP-ID", this.Configuration.GetApiKeyWithPrefix("X-APP-ID"));
            }
            // authentication (appSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Job >("/jobs/provisioning", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProvisioningJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new provisioning job by sending a ProvisioningRequest Create a new provisioning job by sending a ProvisioningRequest
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provisioningRequest">A ProvisioningRequest object describing the job to execute</param>
        /// <returns>Task of Job</returns>
        public async System.Threading.Tasks.Task<Job> CreateProvisioningJobAsync (ProvisioningRequest provisioningRequest)
        {
             Org.OpenAPITools.Client.ApiResponse<Job> localVarResponse = await CreateProvisioningJobAsyncWithHttpInfo(provisioningRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new provisioning job by sending a ProvisioningRequest Create a new provisioning job by sending a ProvisioningRequest
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provisioningRequest">A ProvisioningRequest object describing the job to execute</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Job>> CreateProvisioningJobAsyncWithHttpInfo (ProvisioningRequest provisioningRequest)
        {
            // verify the required parameter 'provisioningRequest' is set
            if (provisioningRequest == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'provisioningRequest' when calling JobsApi->CreateProvisioningJob");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = provisioningRequest;

            // authentication (appId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-APP-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-APP-ID", this.Configuration.GetApiKeyWithPrefix("X-APP-ID"));
            }
            // authentication (appSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Job>("/jobs/provisioning", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProvisioningJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get detailed information about a job (Status, logs...) Get detailed information about a job (Status, logs...)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The job ID</param>
        /// <returns>Job</returns>
        public Job GetJob (string id)
        {
             Org.OpenAPITools.Client.ApiResponse<Job> localVarResponse = GetJobWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get detailed information about a job (Status, logs...) Get detailed information about a job (Status, logs...)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The job ID</param>
        /// <returns>ApiResponse of Job</returns>
        public Org.OpenAPITools.Client.ApiResponse< Job > GetJobWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling JobsApi->GetJob");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (appId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-APP-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-APP-ID", this.Configuration.GetApiKeyWithPrefix("X-APP-ID"));
            }
            // authentication (appSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Job >("/jobs/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get detailed information about a job (Status, logs...) Get detailed information about a job (Status, logs...)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The job ID</param>
        /// <returns>Task of Job</returns>
        public async System.Threading.Tasks.Task<Job> GetJobAsync (string id)
        {
             Org.OpenAPITools.Client.ApiResponse<Job> localVarResponse = await GetJobAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get detailed information about a job (Status, logs...) Get detailed information about a job (Status, logs...)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The job ID</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Job>> GetJobAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling JobsApi->GetJob");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (appId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-APP-ID")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-APP-ID", this.Configuration.GetApiKeyWithPrefix("X-APP-ID"));
            }
            // authentication (appSecret) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-KEY", this.Configuration.GetApiKeyWithPrefix("X-API-KEY"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Job>("/jobs/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
