/* 
 * SalesTim API
 *
 * The Microsoft Teams Governance API 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@salestim.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPluginsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new plugin
        /// </summary>
        /// <remarks>
        /// Create a new plugin and get its generated ID and secret.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"></param>
        /// <returns>Plugin</returns>
        Plugin CreatePlugin (InlineObject1 inlineObject1);

        /// <summary>
        /// Create a new plugin
        /// </summary>
        /// <remarks>
        /// Create a new plugin and get its generated ID and secret.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"></param>
        /// <returns>ApiResponse of Plugin</returns>
        ApiResponse<Plugin> CreatePluginWithHttpInfo (InlineObject1 inlineObject1);
        /// <summary>
        /// Delete a plugin
        /// </summary>
        /// <remarks>
        /// Delete a plugin
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the plugin to delete</param>
        /// <returns></returns>
        void DeletePlugin (string id);

        /// <summary>
        /// Delete a plugin
        /// </summary>
        /// <remarks>
        /// Delete a plugin
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the plugin to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePluginWithHttpInfo (string id);
        /// <summary>
        /// Get all plugins in a tenant
        /// </summary>
        /// <remarks>
        /// Get all plugins in a tenant
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Plugin&gt;</returns>
        List<Plugin> GetPlugIns ();

        /// <summary>
        /// Get all plugins in a tenant
        /// </summary>
        /// <remarks>
        /// Get all plugins in a tenant
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Plugin&gt;</returns>
        ApiResponse<List<Plugin>> GetPlugInsWithHttpInfo ();
        /// <summary>
        /// Regenerate a plugin secret
        /// </summary>
        /// <remarks>
        /// Regenerate a plugin secret
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The plugin ID</param>
        /// <returns>Plugin</returns>
        Plugin RegeneratePluginSecret (string id);

        /// <summary>
        /// Regenerate a plugin secret
        /// </summary>
        /// <remarks>
        /// Regenerate a plugin secret
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The plugin ID</param>
        /// <returns>ApiResponse of Plugin</returns>
        ApiResponse<Plugin> RegeneratePluginSecretWithHttpInfo (string id);
        /// <summary>
        /// Update a plugin
        /// </summary>
        /// <remarks>
        /// Update a plugin
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the plugin to update</param>
        /// <param name="inlineObject2"></param>
        /// <returns>Plugin</returns>
        Plugin UpdatePlugin (string id, InlineObject2 inlineObject2);

        /// <summary>
        /// Update a plugin
        /// </summary>
        /// <remarks>
        /// Update a plugin
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the plugin to update</param>
        /// <param name="inlineObject2"></param>
        /// <returns>ApiResponse of Plugin</returns>
        ApiResponse<Plugin> UpdatePluginWithHttpInfo (string id, InlineObject2 inlineObject2);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPluginsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new plugin
        /// </summary>
        /// <remarks>
        /// Create a new plugin and get its generated ID and secret.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"></param>
        /// <returns>Task of Plugin</returns>
        System.Threading.Tasks.Task<Plugin> CreatePluginAsync (InlineObject1 inlineObject1);

        /// <summary>
        /// Create a new plugin
        /// </summary>
        /// <remarks>
        /// Create a new plugin and get its generated ID and secret.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"></param>
        /// <returns>Task of ApiResponse (Plugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<Plugin>> CreatePluginAsyncWithHttpInfo (InlineObject1 inlineObject1);
        /// <summary>
        /// Delete a plugin
        /// </summary>
        /// <remarks>
        /// Delete a plugin
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the plugin to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePluginAsync (string id);

        /// <summary>
        /// Delete a plugin
        /// </summary>
        /// <remarks>
        /// Delete a plugin
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the plugin to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePluginAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get all plugins in a tenant
        /// </summary>
        /// <remarks>
        /// Get all plugins in a tenant
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Plugin&gt;</returns>
        System.Threading.Tasks.Task<List<Plugin>> GetPlugInsAsync ();

        /// <summary>
        /// Get all plugins in a tenant
        /// </summary>
        /// <remarks>
        /// Get all plugins in a tenant
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Plugin&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Plugin>>> GetPlugInsAsyncWithHttpInfo ();
        /// <summary>
        /// Regenerate a plugin secret
        /// </summary>
        /// <remarks>
        /// Regenerate a plugin secret
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The plugin ID</param>
        /// <returns>Task of Plugin</returns>
        System.Threading.Tasks.Task<Plugin> RegeneratePluginSecretAsync (string id);

        /// <summary>
        /// Regenerate a plugin secret
        /// </summary>
        /// <remarks>
        /// Regenerate a plugin secret
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The plugin ID</param>
        /// <returns>Task of ApiResponse (Plugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<Plugin>> RegeneratePluginSecretAsyncWithHttpInfo (string id);
        /// <summary>
        /// Update a plugin
        /// </summary>
        /// <remarks>
        /// Update a plugin
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the plugin to update</param>
        /// <param name="inlineObject2"></param>
        /// <returns>Task of Plugin</returns>
        System.Threading.Tasks.Task<Plugin> UpdatePluginAsync (string id, InlineObject2 inlineObject2);

        /// <summary>
        /// Update a plugin
        /// </summary>
        /// <remarks>
        /// Update a plugin
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the plugin to update</param>
        /// <param name="inlineObject2"></param>
        /// <returns>Task of ApiResponse (Plugin)</returns>
        System.Threading.Tasks.Task<ApiResponse<Plugin>> UpdatePluginAsyncWithHttpInfo (string id, InlineObject2 inlineObject2);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPluginsApi : IPluginsApiSync, IPluginsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PluginsApi : IPluginsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PluginsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PluginsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PluginsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PluginsApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PluginsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PluginsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PluginsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PluginsApi(Org.OpenAPITools.Client.ISynchronousClient client,Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new plugin Create a new plugin and get its generated ID and secret.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"></param>
        /// <returns>Plugin</returns>
        public Plugin CreatePlugin (InlineObject1 inlineObject1)
        {
             Org.OpenAPITools.Client.ApiResponse<Plugin> localVarResponse = CreatePluginWithHttpInfo(inlineObject1);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new plugin Create a new plugin and get its generated ID and secret.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"></param>
        /// <returns>ApiResponse of Plugin</returns>
        public Org.OpenAPITools.Client.ApiResponse< Plugin > CreatePluginWithHttpInfo (InlineObject1 inlineObject1)
        {
            // verify the required parameter 'inlineObject1' is set
            if (inlineObject1 == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'inlineObject1' when calling PluginsApi->CreatePlugin");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = inlineObject1;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Plugin >("/plugins", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePlugin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new plugin Create a new plugin and get its generated ID and secret.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"></param>
        /// <returns>Task of Plugin</returns>
        public async System.Threading.Tasks.Task<Plugin> CreatePluginAsync (InlineObject1 inlineObject1)
        {
             Org.OpenAPITools.Client.ApiResponse<Plugin> localVarResponse = await CreatePluginAsyncWithHttpInfo(inlineObject1);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new plugin Create a new plugin and get its generated ID and secret.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"></param>
        /// <returns>Task of ApiResponse (Plugin)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Plugin>> CreatePluginAsyncWithHttpInfo (InlineObject1 inlineObject1)
        {
            // verify the required parameter 'inlineObject1' is set
            if (inlineObject1 == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'inlineObject1' when calling PluginsApi->CreatePlugin");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = inlineObject1;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Plugin>("/plugins", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePlugin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a plugin Delete a plugin
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the plugin to delete</param>
        /// <returns></returns>
        public void DeletePlugin (string id)
        {
             DeletePluginWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a plugin Delete a plugin
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the plugin to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> DeletePluginWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling PluginsApi->DeletePlugin");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/plugins/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePlugin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a plugin Delete a plugin
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the plugin to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePluginAsync (string id)
        {
             await DeletePluginAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a plugin Delete a plugin
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the plugin to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> DeletePluginAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling PluginsApi->DeletePlugin");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/plugins/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePlugin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all plugins in a tenant Get all plugins in a tenant
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Plugin&gt;</returns>
        public List<Plugin> GetPlugIns ()
        {
             Org.OpenAPITools.Client.ApiResponse<List<Plugin>> localVarResponse = GetPlugInsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all plugins in a tenant Get all plugins in a tenant
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Plugin&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse< List<Plugin> > GetPlugInsWithHttpInfo ()
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Plugin> >("/plugins", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlugIns", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all plugins in a tenant Get all plugins in a tenant
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Plugin&gt;</returns>
        public async System.Threading.Tasks.Task<List<Plugin>> GetPlugInsAsync ()
        {
             Org.OpenAPITools.Client.ApiResponse<List<Plugin>> localVarResponse = await GetPlugInsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all plugins in a tenant Get all plugins in a tenant
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Plugin&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Plugin>>> GetPlugInsAsyncWithHttpInfo ()
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Plugin>>("/plugins", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlugIns", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Regenerate a plugin secret Regenerate a plugin secret
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The plugin ID</param>
        /// <returns>Plugin</returns>
        public Plugin RegeneratePluginSecret (string id)
        {
             Org.OpenAPITools.Client.ApiResponse<Plugin> localVarResponse = RegeneratePluginSecretWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Regenerate a plugin secret Regenerate a plugin secret
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The plugin ID</param>
        /// <returns>ApiResponse of Plugin</returns>
        public Org.OpenAPITools.Client.ApiResponse< Plugin > RegeneratePluginSecretWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling PluginsApi->RegeneratePluginSecret");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Plugin >("/plugins/{id}/regenerateSecret", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegeneratePluginSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Regenerate a plugin secret Regenerate a plugin secret
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The plugin ID</param>
        /// <returns>Task of Plugin</returns>
        public async System.Threading.Tasks.Task<Plugin> RegeneratePluginSecretAsync (string id)
        {
             Org.OpenAPITools.Client.ApiResponse<Plugin> localVarResponse = await RegeneratePluginSecretAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Regenerate a plugin secret Regenerate a plugin secret
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The plugin ID</param>
        /// <returns>Task of ApiResponse (Plugin)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Plugin>> RegeneratePluginSecretAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling PluginsApi->RegeneratePluginSecret");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Plugin>("/plugins/{id}/regenerateSecret", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegeneratePluginSecret", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a plugin Update a plugin
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the plugin to update</param>
        /// <param name="inlineObject2"></param>
        /// <returns>Plugin</returns>
        public Plugin UpdatePlugin (string id, InlineObject2 inlineObject2)
        {
             Org.OpenAPITools.Client.ApiResponse<Plugin> localVarResponse = UpdatePluginWithHttpInfo(id, inlineObject2);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a plugin Update a plugin
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the plugin to update</param>
        /// <param name="inlineObject2"></param>
        /// <returns>ApiResponse of Plugin</returns>
        public Org.OpenAPITools.Client.ApiResponse< Plugin > UpdatePluginWithHttpInfo (string id, InlineObject2 inlineObject2)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling PluginsApi->UpdatePlugin");

            // verify the required parameter 'inlineObject2' is set
            if (inlineObject2 == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'inlineObject2' when calling PluginsApi->UpdatePlugin");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = inlineObject2;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Plugin >("/plugins/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePlugin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a plugin Update a plugin
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the plugin to update</param>
        /// <param name="inlineObject2"></param>
        /// <returns>Task of Plugin</returns>
        public async System.Threading.Tasks.Task<Plugin> UpdatePluginAsync (string id, InlineObject2 inlineObject2)
        {
             Org.OpenAPITools.Client.ApiResponse<Plugin> localVarResponse = await UpdatePluginAsyncWithHttpInfo(id, inlineObject2);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a plugin Update a plugin
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the plugin to update</param>
        /// <param name="inlineObject2"></param>
        /// <returns>Task of ApiResponse (Plugin)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Plugin>> UpdatePluginAsyncWithHttpInfo (string id, InlineObject2 inlineObject2)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling PluginsApi->UpdatePlugin");

            // verify the required parameter 'inlineObject2' is set
            if (inlineObject2 == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'inlineObject2' when calling PluginsApi->UpdatePlugin");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = inlineObject2;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Plugin>("/plugins/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePlugin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
