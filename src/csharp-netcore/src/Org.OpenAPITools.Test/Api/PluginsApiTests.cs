/* 
 * SalesTim API
 *
 * The Microsoft Teams Governance API 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@salestim.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing PluginsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PluginsApiTests : IDisposable
    {
        private PluginsApi instance;

        public PluginsApiTests()
        {
            instance = new PluginsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PluginsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PluginsApi
            //Assert.IsType(typeof(PluginsApi), instance, "instance is a PluginsApi");
        }

        
        /// <summary>
        /// Test CreatePlugin
        /// </summary>
        [Fact]
        public void CreatePluginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject1 inlineObject1 = null;
            //var response = instance.CreatePlugin(inlineObject1);
            //Assert.IsType<Plugin> (response, "response is Plugin");
        }
        
        /// <summary>
        /// Test DeletePlugin
        /// </summary>
        [Fact]
        public void DeletePluginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeletePlugin(id);
            
        }
        
        /// <summary>
        /// Test GetPlugIns
        /// </summary>
        [Fact]
        public void GetPlugInsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetPlugIns();
            //Assert.IsType<List<Plugin>> (response, "response is List<Plugin>");
        }
        
        /// <summary>
        /// Test RegeneratePluginSecret
        /// </summary>
        [Fact]
        public void RegeneratePluginSecretTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.RegeneratePluginSecret(id);
            //Assert.IsType<Plugin> (response, "response is Plugin");
        }
        
        /// <summary>
        /// Test UpdatePlugin
        /// </summary>
        [Fact]
        public void UpdatePluginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //InlineObject2 inlineObject2 = null;
            //var response = instance.UpdatePlugin(id, inlineObject2);
            //Assert.IsType<Plugin> (response, "response is Plugin");
        }
        
    }

}
