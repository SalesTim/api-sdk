/*
 * SalesTim API
 * The Microsoft Teams Governance API\n
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@salestim.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASAppsApi {
    OASClient client;

    public OASAppsApi(OASClient client) {
        this.client = client;
    }

    public OASAppsApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Create a virtual app
     * Create a new virtual app and get its generated ID and secret.
     * @param oaSApp List of properties to be updated. (required)
     * @return OASApp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASApp createApp(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSApp'), 'oaSApp');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASApp) client.invoke(
            'POST', '/apps',
            (OASApp) params.get('oaSApp'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            OASApp.class
        );
    }
    /**
     * Delete a virtual app
     * Delete a virtual app
     * @param id ID of the virtual app to delete (required)
     * @throws OAS.ApiException if fails to make API call
     */
    public void deleteApp(Map<String, Object> params) {
        client.assertNotNull(params.get('id'), 'id');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'DELETE', '/apps/{id}', '',
            query, form,
            new Map<String, Object>{
                'id' => (String) params.get('id')
            },
            new Map<String, Object>(),
            new List<String>(),
            new List<String>(),
            new List<String> { 'bearerAuth' },
            null
        );
    }
    /**
     * Get all virtual apps in a tenant
     * Get all virtual apps in a tenant
     * @return List<OASApp>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASApp> getApps() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASApp>) client.invoke(
            'GET', '/apps', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            List<OASApp>.class
        );
    }
    /**
     * Regenerate a virtual app secret
     * Regenerate a virtual app secret
     * @param id The virtual app ID (required)
     * @return OASApp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASApp regenerateAppSecret(Map<String, Object> params) {
        client.assertNotNull(params.get('id'), 'id');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASApp) client.invoke(
            'POST', '/apps/{id}/regenerateSecret', '',
            query, form,
            new Map<String, Object>{
                'id' => (String) params.get('id')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'bearerAuth' },
            OASApp.class
        );
    }
    /**
     * Update a virtual app
     * Update a virtual app
     * @param id ID of the virtual app to update (required)
     * @param oaSApp List of properties to be updated. (required)
     * @return OASApp
     * @throws OAS.ApiException if fails to make API call
     */
    public OASApp updateApp(Map<String, Object> params) {
        client.assertNotNull(params.get('id'), 'id');
        client.assertNotNull(params.get('oaSApp'), 'oaSApp');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASApp) client.invoke(
            'PUT', '/apps/{id}',
            (OASApp) params.get('oaSApp'),
            query, form,
            new Map<String, Object>{
                'id' => (String) params.get('id')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            OASApp.class
        );
    }
}
