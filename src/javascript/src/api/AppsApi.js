/**
 * SalesTim API
 * The Microsoft Teams Governance API 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@salestim.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import App from '../model/App';

/**
* Apps service.
* @module api/AppsApi
* @version 1.0.0
*/
export default class AppsApi {

    /**
    * Constructs a new AppsApi. 
    * @alias module:api/AppsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createApp operation.
     * @callback module:api/AppsApi~createAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/App} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a virtual app
     * Create a new virtual app and get its generated ID and secret.
     * @param {module:model/App} app List of properties to be updated.
     * @param {module:api/AppsApi~createAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/App}
     */
    createApp(app, callback) {
      let postBody = app;
      // verify the required parameter 'app' is set
      if (app === undefined || app === null) {
        throw new Error("Missing the required parameter 'app' when calling createApp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = App;
      return this.apiClient.callApi(
        '/apps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApp operation.
     * @callback module:api/AppsApi~deleteAppCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a virtual app
     * Delete a virtual app
     * @param {String} id ID of the virtual app to delete
     * @param {module:api/AppsApi~deleteAppCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteApp(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteApp");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apps/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApps operation.
     * @callback module:api/AppsApi~getAppsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/App>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all virtual apps in a tenant
     * Get all virtual apps in a tenant
     * @param {module:api/AppsApi~getAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/App>}
     */
    getApps(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [App];
      return this.apiClient.callApi(
        '/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the regenerateAppSecret operation.
     * @callback module:api/AppsApi~regenerateAppSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/App} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Regenerate a virtual app secret
     * Regenerate a virtual app secret
     * @param {String} id The virtual app ID
     * @param {module:api/AppsApi~regenerateAppSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/App}
     */
    regenerateAppSecret(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling regenerateAppSecret");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = App;
      return this.apiClient.callApi(
        '/apps/{id}/regenerateSecret', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApp operation.
     * @callback module:api/AppsApi~updateAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/App} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a virtual app
     * Update a virtual app
     * @param {String} id ID of the virtual app to update
     * @param {module:model/App} app List of properties to be updated.
     * @param {module:api/AppsApi~updateAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/App}
     */
    updateApp(id, app, callback) {
      let postBody = app;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateApp");
      }
      // verify the required parameter 'app' is set
      if (app === undefined || app === null) {
        throw new Error("Missing the required parameter 'app' when calling updateApp");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = App;
      return this.apiClient.callApi(
        '/apps/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
