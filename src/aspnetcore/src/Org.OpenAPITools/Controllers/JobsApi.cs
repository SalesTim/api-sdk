/*
 * SalesTim API
 *
 * The Microsoft Teams Governance API 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@salestim.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Attributes;
using Microsoft.AspNetCore.Authorization;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class JobsApiController : ControllerBase
    { 
        /// <summary>
        /// Create a new provisioning job by sending a ProvisioningRequest
        /// </summary>
        /// <remarks>Create a new provisioning job by sending a ProvisioningRequest</remarks>
        /// <param name="provisioningRequest">A ProvisioningRequest object describing the job to execute</param>
        /// <response code="200">Operation executed successfully.</response>
        /// <response code="401">API key or app id are missing or invalid.</response>
        /// <response code="404">The ressource cannot be found.</response>
        /// <response code="429">Too many requests. Your request has been throttled.</response>
        /// <response code="500">The server encountered an unexpected condition that prevented it from fulfilling the request.</response>
        /// <response code="503">Service unavailable.</response>
        /// <response code="0">The server encountered an unexpected condition that prevented it from fulfilling the request.</response>
        [HttpPost]
        [Route("/v1.0/jobs/provisioning")]
        [Authorize(Policy = "appId")]
        [Authorize(Policy = "appSecret")]
        [ValidateModelState]
        [SwaggerOperation("CreateProvisioningJob")]
        [SwaggerResponse(statusCode: 200, type: typeof(Job), description: "Operation executed successfully.")]
        public virtual IActionResult CreateProvisioningJob([FromBody]ProvisioningRequest provisioningRequest)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Job));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);
            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503);
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : \"{}\",\n  \"log\" : [ \"log\", \"log\" ],\n  \"progress\" : 8,\n  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n  \"type\" : \"type\",\n  \"status\" : \"active\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Job>(exampleJson)
            : default(Job);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get detailed information about a job (Status, logs...)
        /// </summary>
        /// <remarks>Get detailed information about a job (Status, logs...)</remarks>
        /// <param name="id">The job ID</param>
        /// <response code="200">Operation executed successfully.</response>
        /// <response code="401">API key or app id are missing or invalid.</response>
        /// <response code="404">The ressource cannot be found.</response>
        /// <response code="429">Too many requests. Your request has been throttled.</response>
        /// <response code="500">The server encountered an unexpected condition that prevented it from fulfilling the request.</response>
        /// <response code="503">Service unavailable.</response>
        /// <response code="0">The server encountered an unexpected condition that prevented it from fulfilling the request.</response>
        [HttpGet]
        [Route("/v1.0/jobs/{id}")]
        [Authorize(Policy = "appId")]
        [Authorize(Policy = "appSecret")]
        [ValidateModelState]
        [SwaggerOperation("GetJob")]
        [SwaggerResponse(statusCode: 200, type: typeof(Job), description: "Operation executed successfully.")]
        public virtual IActionResult GetJob([FromRoute][Required]string id)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Job));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);
            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503);
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : \"{}\",\n  \"log\" : [ \"log\", \"log\" ],\n  \"progress\" : 8,\n  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n  \"type\" : \"type\",\n  \"status\" : \"active\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Job>(exampleJson)
            : default(Job);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
