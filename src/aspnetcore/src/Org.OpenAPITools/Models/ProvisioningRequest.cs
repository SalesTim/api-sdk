/*
 * SalesTim API
 *
 * The Microsoft Teams Governance API 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@salestim.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// A request to provision a team based on a template from your corporate catalog
    /// </summary>
    [DataContract]
    public partial class ProvisioningRequest : IEquatable<ProvisioningRequest>
    {
        /// <summary>
        /// The template ID
        /// </summary>
        /// <value>The template ID</value>
        [Required]
        [DataMember(Name="templateId", EmitDefaultValue=false)]
        public string TemplateId { get; set; }

        /// <summary>
        /// Requested team name
        /// </summary>
        /// <value>Requested team name</value>
        [Required]
        [DataMember(Name="requestedTeamName", EmitDefaultValue=false)]
        public string RequestedTeamName { get; set; }

        /// <summary>
        /// Requested team description
        /// </summary>
        /// <value>Requested team description</value>
        [DataMember(Name="requestedTeamDescription", EmitDefaultValue=false)]
        public string RequestedTeamDescription { get; set; }

        /// <summary>
        /// Requested team welcome message
        /// </summary>
        /// <value>Requested team welcome message</value>
        [DataMember(Name="requestedTeamWelcomeMessage", EmitDefaultValue=false)]
        public string RequestedTeamWelcomeMessage { get; set; }

        /// <summary>
        /// Requested members as an array of objects
        /// </summary>
        /// <value>Requested members as an array of objects</value>
        [DataMember(Name="requestedMembers", EmitDefaultValue=false)]
        public List<ProvisioningRequestRequestedMembers> RequestedMembers { get; set; }

        /// <summary>
        /// Requested owners as an array of users. User identifier could be its ID, UPN or email.
        /// </summary>
        /// <value>Requested owners as an array of users. User identifier could be its ID, UPN or email.</value>
        [DataMember(Name="requestedOwners", EmitDefaultValue=false)]
        public List<ProvisioningRequestRequestedMembers> RequestedOwners { get; set; }

        /// <summary>
        /// Gets or Sets OnBehalfOfRequester
        /// </summary>
        [DataMember(Name="onBehalfOfRequester", EmitDefaultValue=false)]
        public ProvisioningRequestOnBehalfOfRequester OnBehalfOfRequester { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProvisioningRequest {\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  RequestedTeamName: ").Append(RequestedTeamName).Append("\n");
            sb.Append("  RequestedTeamDescription: ").Append(RequestedTeamDescription).Append("\n");
            sb.Append("  RequestedTeamWelcomeMessage: ").Append(RequestedTeamWelcomeMessage).Append("\n");
            sb.Append("  RequestedMembers: ").Append(RequestedMembers).Append("\n");
            sb.Append("  RequestedOwners: ").Append(RequestedOwners).Append("\n");
            sb.Append("  OnBehalfOfRequester: ").Append(OnBehalfOfRequester).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProvisioningRequest)obj);
        }

        /// <summary>
        /// Returns true if ProvisioningRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ProvisioningRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProvisioningRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TemplateId == other.TemplateId ||
                    TemplateId != null &&
                    TemplateId.Equals(other.TemplateId)
                ) && 
                (
                    RequestedTeamName == other.RequestedTeamName ||
                    RequestedTeamName != null &&
                    RequestedTeamName.Equals(other.RequestedTeamName)
                ) && 
                (
                    RequestedTeamDescription == other.RequestedTeamDescription ||
                    RequestedTeamDescription != null &&
                    RequestedTeamDescription.Equals(other.RequestedTeamDescription)
                ) && 
                (
                    RequestedTeamWelcomeMessage == other.RequestedTeamWelcomeMessage ||
                    RequestedTeamWelcomeMessage != null &&
                    RequestedTeamWelcomeMessage.Equals(other.RequestedTeamWelcomeMessage)
                ) && 
                (
                    RequestedMembers == other.RequestedMembers ||
                    RequestedMembers != null &&
                    other.RequestedMembers != null &&
                    RequestedMembers.SequenceEqual(other.RequestedMembers)
                ) && 
                (
                    RequestedOwners == other.RequestedOwners ||
                    RequestedOwners != null &&
                    other.RequestedOwners != null &&
                    RequestedOwners.SequenceEqual(other.RequestedOwners)
                ) && 
                (
                    OnBehalfOfRequester == other.OnBehalfOfRequester ||
                    OnBehalfOfRequester != null &&
                    OnBehalfOfRequester.Equals(other.OnBehalfOfRequester)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TemplateId != null)
                    hashCode = hashCode * 59 + TemplateId.GetHashCode();
                    if (RequestedTeamName != null)
                    hashCode = hashCode * 59 + RequestedTeamName.GetHashCode();
                    if (RequestedTeamDescription != null)
                    hashCode = hashCode * 59 + RequestedTeamDescription.GetHashCode();
                    if (RequestedTeamWelcomeMessage != null)
                    hashCode = hashCode * 59 + RequestedTeamWelcomeMessage.GetHashCode();
                    if (RequestedMembers != null)
                    hashCode = hashCode * 59 + RequestedMembers.GetHashCode();
                    if (RequestedOwners != null)
                    hashCode = hashCode * 59 + RequestedOwners.GetHashCode();
                    if (OnBehalfOfRequester != null)
                    hashCode = hashCode * 59 + OnBehalfOfRequester.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProvisioningRequest left, ProvisioningRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProvisioningRequest left, ProvisioningRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
