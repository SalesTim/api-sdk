/*
 * SalesTim API
 *
 * The Microsoft Teams Governance API 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@salestim.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Collection of localized category labels
    /// </summary>
    [DataContract]
    public partial class StoreCategoryLabel : IEquatable<StoreCategoryLabel>
    {
        /// <summary>
        /// Category label localized for en-us.
        /// </summary>
        /// <value>Category label localized for en-us.</value>
        [DataMember(Name="en-us", EmitDefaultValue=false)]
        public string EnUs { get; set; }

        /// <summary>
        /// Category label localized for fr-fr.
        /// </summary>
        /// <value>Category label localized for fr-fr.</value>
        [DataMember(Name="fr-fr", EmitDefaultValue=false)]
        public string FrFr { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoreCategoryLabel {\n");
            sb.Append("  EnUs: ").Append(EnUs).Append("\n");
            sb.Append("  FrFr: ").Append(FrFr).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((StoreCategoryLabel)obj);
        }

        /// <summary>
        /// Returns true if StoreCategoryLabel instances are equal
        /// </summary>
        /// <param name="other">Instance of StoreCategoryLabel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoreCategoryLabel other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EnUs == other.EnUs ||
                    EnUs != null &&
                    EnUs.Equals(other.EnUs)
                ) && 
                (
                    FrFr == other.FrFr ||
                    FrFr != null &&
                    FrFr.Equals(other.FrFr)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EnUs != null)
                    hashCode = hashCode * 59 + EnUs.GetHashCode();
                    if (FrFr != null)
                    hashCode = hashCode * 59 + FrFr.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(StoreCategoryLabel left, StoreCategoryLabel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StoreCategoryLabel left, StoreCategoryLabel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
